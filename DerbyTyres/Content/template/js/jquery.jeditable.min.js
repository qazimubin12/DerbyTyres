/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/jquery-jeditable@2.0.19/src/jquery.jeditable.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
/**
 * @file Jeditable - jQuery in place edit plugin
 * @home https://github.com/NicolasCARPi/jquery_jeditable
 * @author Mika Tuupola, Dylan Verheul, Nicolas CARPi
 * @copyright © 2006 Mika Tuupola, Dylan Verheul, Nicolas CARPi
 * @licence MIT (see LICENCE file)
 * @name Jquery-jeditable
 * @type  jQuery
 *
 * @param {String|Function} target - URL or Function to send edited content to. Can also be 'disable', 'enable', or 'destroy'
 * @param {Object} [options] - Additional options
 * @param {Object} [options.ajaxoptions] - jQuery Ajax options. See https://api.jquery.com/jQuery.ajax/
 * @param {Function} [options.before] - Function to be executed before going into edit mode
 * @param {Function} [options.callback] - function(result, settings, submitdata) Function to run after submitting edited content
 * @param {String} [options.cancel] - Cancel button value, empty means no button
 * @param {String} [options.cancelcssclass] - CSS class to apply to cancel button
 * @param {Number} [options.cols] - Number of columns if using textarea
 * @param {String} [options.cssclass] - CSS class to apply to input form; use 'inherit' to copy from parent
 * @param {String} [options.inputcssclass] - CSS class to apply to input. 'inherit' to copy from parent
 * @param {Function} [options.intercept] - Intercept the returned data so you have a chance to process it before returning it in the page
 * @param {String|Function} [options.data] - Content loaded in the form
 * @param {String} [options.event='click'] - jQuery event such as 'click' or 'dblclick'. See https://api.jquery.com/category/events/
 * @param {String} [options.formid] - Give an id to the form that is produced
 * @param {String|Number} [options.height='auto'] - Height of the element in pixels or 'auto' or 'none'
 * @param {String} [options.id='id'] - POST parameter name of edited div id
 * @param {String} [options.indicator] - Indicator html to show when saving
 * @param {String} [options.label] - Label for the form
 * @param {String} [options.list] - HTML5 attribute for text input. Will suggest from a datalist with id of the list option
 * @param {String|Function} [options.loaddata] - Extra parameters to pass when fetching content before editing
 * @param {String} [options.loadtext='Loading…'] - Text to display while loading external content
 * @param {String} [options.loadtype='GET'] - Request type for loadurl (GET or POST)
 * @param {String} [options.loadurl] - URL to fetch input content before editing
 * @param {Number} [options.max] - Maximum value for number type
 * @param {String} [options.maxlength] - The maximum number of character in the text field
 * @param {String} [options.method] - Method to use to send edited content (POST or PUT)
 * @param {Number} [options.min] - Minimum value for number type
 * @param {Boolean} [options.multiple] - Allow multiple selections in a select input
 * @param {String} [options.name='value'] - POST parameter name of edited content
 * @param {String|Function} [options.onblur='cancel'] - Use 'cancel', 'submit', 'ignore' or function. If function returns false, the form is cancelled.
 * @param {Function} [options.onedit] - function triggered upon edition; will cancel edition if it returns false
 * @param {Function} [options.onerror] - function(settings, original, xhr) { ... } called on error
 * @param {Function} [options.onreset] - function(settings, original) { ... } called before reset
 * @param {Function} [options.onsubmit] - function(settings, original) { ... } called before submit
 * @param {String} [options.pattern] - HTML5 attribute for text or URL input
 * @param {String} [options.placeholder='Click to edit'] - Placeholder text or html to insert when element is empty
 * @param {Number} [options.rows] - number of rows if using textarea
 * @param {Boolean} [options.select] - When true text is selected
 * @param {Function} [options.showfn]- Function that can animate the element when switching to edit mode
 * @param {String} [options.size] - The size of the text field
 * @param {String} [options.sortselectoptions] - Sort the options of a select form
 * @param {Number} [options.step] - Step size for number type
 * @param {String} [options.style] - Style to apply to input form; 'inherit' to copy from parent
 * @param {String} [options.submit] - submit button value, empty means no button
 * @param {String} [options.submitcssclass] - CSS class to apply to submit button
 * @param {Object|Function} [options.submitdata] - Extra parameters to send when submitting edited content. function(revert, settings, submitdata)
 * @param {String} [options.tooltip] - Tooltip text that appears on hover (via title attribute)
 * @param {String} [options.type='text'] - text, textarea, select, email, number, url (or any 3rd party input type)
 * @param {String|Number} [options.width='auto'] - The width of the element in pixels or 'auto' or 'none'
 *
 * @example <caption>Simple usage example:</caption>
 * $(".editable").editable("save.php", {
 *     cancel : 'Cancel',
 *     submit : 'Save',
 *     tooltip : "Click to edit...",
 * });
 */
!function(t){"use strict";t.fn.editableAriaShim=function(){return this.attr({role:"button",tabindex:0}),this},t.fn.editable=function(e,a){if("disable"!==e)if("enable"!==e){if("destroy"!==e){var i=t.extend({},t.fn.editable.defaults,{target:e},a),n=t.editable.types[i.type].plugin||function(){},l=t.editable.types[i.type].submit||function(){},o=t.editable.types[i.type].buttons||t.editable.types.defaults.buttons,s=t.editable.types[i.type].content||t.editable.types.defaults.content,r=t.editable.types[i.type].element||t.editable.types.defaults.element,d=t.editable.types[i.type].reset||t.editable.types.defaults.reset,p=t.editable.types[i.type].destroy||t.editable.types.defaults.destroy,c=i.callback||function(){},u=i.intercept||function(t){return t},h=i.onedit||function(){},f=i.onsubmit||function(){},m=i.onreset||function(){},y=i.onerror||d;i.before;return i.tooltip&&t(this).attr("title",i.tooltip),this.each((function(){var a=this;t(this).data("event.editable",i.event),t(this).html().trim()||t(this).html(i.placeholder),"destroy"!==e?(t(this).on(i.event,(function(e){if(!0!==t(this).data("disabled.editable")&&9!==e.which&&!a.editing&&!1!==h.apply(this,[i,a,e])){if(i.before&&"function"==typeof i.before)i.before(e);else if(i.before&&"function"!=typeof i.before)throw"The 'before' option needs to be provided as a function!";e.preventDefault(),e.stopPropagation(),i.tooltip&&t(a).removeAttr("title"),t(this).html().toLowerCase().replace(/(;|"|\/)/g,"")===i.placeholder.toLowerCase().replace(/(;|"|\/)/g,"")&&t(this).html(""),a.editing=!0,a.revert=t(a).text(),t(a).html("");var p=t("<form />");i.cssclass&&("inherit"===i.cssclass?p.attr("class",t(a).attr("class")):p.attr("class",i.cssclass)),i.style&&("inherit"===i.style?(p.attr("style",t(a).attr("style")),p.css("display",t(a).css("display"))):p.attr("style",i.style)),i.label&&p.append("<label>"+i.label+"</label>"),i.formid&&p.attr("id",i.formid);var m,b,v=r.apply(p,[i,a]);i.inputcssclass&&("inherit"===i.inputcssclass?v.attr("class",t(a).attr("class")):v.attr("class",i.inputcssclass));var g=!1;if(i.loadurl){b=a.setTimeout((function(){v.disabled=!0}),100),t(a).html(i.loadtext);var x={};x[i.id]=a.id,"function"==typeof i.loaddata?t.extend(x,i.loaddata.apply(a,[a.revert,i])):t.extend(x,i.loaddata),t.ajax({type:i.loadtype,url:i.loadurl,data:x,async:!1,cache:!1,success:function(t){a.clearTimeout(b),m=t,v.disabled=!1}})}else i.data?(m=i.data,"function"==typeof i.data&&(m=i.data.apply(a,[a.revert,i]))):m=a.revert;if(s.apply(p,[m,i,a]),v.attr("name",i.name),"none"!==i.width){var w=i.width-(v.outerWidth(!0)-i.width);v.width(w)}o.apply(p,[i,a]),i.showfn&&"function"==typeof i.showfn&&p.hide(),t(a).html(""),t(a).append(p),i.showfn&&"function"==typeof i.showfn&&i.showfn(p),n.apply(p,[i,a]),p.find(":input:visible:enabled:first").trigger("focus"),i.select&&v.trigger("select"),t(this).on("keydown",(function(t){27===t.which?(t.preventDefault(),d.apply(p,[i,a])):13==t.which&&t.shiftKey&&(t.preventDefault(),p.trigger("submit"))})),"cancel"===i.onblur?v.on("blur",(function(t){b=a.setTimeout((function(){d.apply(p,[i,a])}),500)})):"submit"===i.onblur?v.on("blur",(function(t){b=a.setTimeout((function(){p.trigger("submit")}),200)})):"function"==typeof i.onblur&&v.on("blur",(function(t){!1===i.onblur.apply(a,[v.val(),i,p])&&d.apply(p,[i,a])})),p.on("submit",(function(e){if(e.preventDefault(),e.stopPropagation(),g)return!1;if(g=!0,b&&a.clearTimeout(b),(g=!1!==f.apply(p,[i,a]))&&(g=!1!==l.apply(p,[i,a])))if("function"==typeof i.target){var n=function(e,n){g=!1,!1!==n&&(t(a).html(e),a.editing=!1,c.apply(a,[a.innerText,i]),t(a).html().trim()||t(a).html(i.placeholder))},o=i.target.apply(a,[v.val(),i,n]);!1!==o&&void 0!==o&&n(o,o)}else{var s={};s[i.name]=v.val(),s[i.id]=a.id,"function"==typeof i.submitdata?t.extend(s,i.submitdata.apply(a,[a.revert,i,s])):t.extend(s,i.submitdata),"PUT"===i.method&&(s._method="put"),t(a).html(i.indicator);var r={type:"POST",complete:function(t,e){g=!1},data:s,dataType:"html",url:i.target,success:function(e,n){e=u.apply(a,[e,n]),"html"===r.dataType&&t(a).html(e),a.editing=!1,c.apply(a,[e,i,s]),t(a).html().trim()||t(a).html(i.placeholder)},error:function(t,e,n){y.apply(p,[i,a,t])}};t.extend(r,i.ajaxoptions),t.ajax(r)}return t(a).attr("title",i.tooltip),!1}))}})),a.reset=function(e){a.editing&&!1!==m.apply(e,[i,a])&&(t(a).text(a.revert),a.editing=!1,t(a).html().trim()||t(a).html(i.placeholder),i.tooltip&&t(a).attr("title",i.tooltip))},a.destroy=function(e){t(a).off(t(a).data("event.editable")).removeData("disabled.editable").removeData("event.editable"),a.clearTimeouts(),a.editing&&d.apply(e,[i,a])},a.clearTimeout=function(e){var i=t(a).data("timeouts");if(clearTimeout(e),i){var n=i.indexOf(e);n>-1?(i.splice(n,1),i.length<=0&&t(a).removeData("timeouts")):console.warn("jeditable clearTimeout could not find timeout "+e)}},a.clearTimeouts=function(){var e=t(a).data("timeouts");if(e){for(var i=0,n=e.length;i<n;++i)clearTimeout(e[i]);e.length=0,t(a).removeData("timeouts")}},a.setTimeout=function(e,i){var n=t(a).data("timeouts"),l=setTimeout((function(){e(),a.clearTimeout(l)}),i);return n||(n=[],t(a).data("timeouts",n)),n.push(l),l}):p.apply(t(this).find("form"),[i,a])}))}t(this).off(t(this).data("event.editable")).removeData("disabled.editable").removeData("event.editable")}else t(this).data("disabled.editable",!1);else t(this).data("disabled.editable",!0)};var e=function(t){var e=document.createElement("input");return e.setAttribute("type",t),"text"!==e.type?t:"text"};t.editable={types:{defaults:{element:function(e,a){var i=t('<input type="hidden"></input>');return t(this).append(i),i},content:function(e,a,i){t(this).find(":input:first").val(e)},reset:function(t,e){e.reset(this)},destroy:function(t,e){e.destroy(this)},buttons:function(e,a){var i,n,l=this;(e.submit&&(e.submit.match(/>$/)?i=t(e.submit).on("click",(function(){"submit"!==i.attr("type")&&l.trigger("submit")})):((i=t('<button type="submit" />')).html(e.submit),e.submitcssclass&&i.addClass(e.submitcssclass)),t(this).append(i)),e.cancel)&&(e.cancel.match(/>$/)?n=t(e.cancel):((n=t('<button type="cancel" />')).html(e.cancel),e.cancelcssclass&&n.addClass(e.cancelcssclass)),t(this).append(n),t(n).on("click",(function(i){return("function"==typeof t.editable.types[e.type].reset?t.editable.types[e.type].reset:t.editable.types.defaults.reset).apply(l,[e,a]),!1})))}},text:{element:function(e,a){var i=t("<input />").attr({autocomplete:"off",list:e.list,maxlength:e.maxlength,pattern:e.pattern,placeholder:e.placeholder,tooltip:e.tooltip,type:"text"});return"none"!==e.width&&i.css("width",e.width),"none"!==e.height&&i.css("height",e.height),e.size&&i.attr("size",e.size),e.maxlength&&i.attr("maxlength",e.maxlength),t(this).append(i),i}},textarea:{element:function(e,a){var i=t("<textarea></textarea>");return e.rows?i.attr("rows",e.rows):"none"!==e.height&&i.height(e.height),e.cols?i.attr("cols",e.cols):"none"!==e.width&&i.width(e.width),e.maxlength&&i.attr("maxlength",e.maxlength),t(this).append(i),i}},select:{element:function(e,a){var i=t("<select />");return e.multiple&&i.attr("multiple","multiple"),t(this).append(i),i},content:function(e,a,i){var n;n=String===e.constructor?JSON.parse(e):e;var l,o,s=[];if(Array.isArray(n)&&n.every(Array.isArray))s=n,n={},s.forEach((function(t){n[t[0]]=t[1]}));else for(l in n)s.push([l,n[l]]);a.sortselectoptions&&s.sort((function(t,e){return(t=t[1])<(e=e[1])?-1:t>e?1:0}));for(var r=0;r<s.length;r++){l=s[r][0];var d=s[r][1];n.hasOwnProperty(l)&&("selected"!==l&&(o=t("<option />").val(l).append(d),n.selected!==l&&l!==String.prototype.trim.call(null==i.revert?"":i.revert)||t(o).prop("selected","selected"),t(this).find("select").append(o)))}if(!a.submit){var p=this;t(this).find("select").change((function(){p.trigger("submit")}))}}},number:{element:function(a,i){var n=t("<input />").attr({maxlength:a.maxlength,placeholder:a.placeholder,min:a.min,max:a.max,step:a.step,tooltip:a.tooltip,type:e("number")});return"none"!==a.width&&n.css("width",a.width),t(this).append(n),n}},email:{element:function(a,i){var n=t("<input />").attr({maxlength:a.maxlength,placeholder:a.placeholder,tooltip:a.tooltip,type:e("email")});return"none"!==a.width&&n.css("width",a.width),t(this).append(n),n}},url:{element:function(a,i){var n=t("<input />").attr({maxlength:a.maxlength,pattern:a.pattern,placeholder:a.placeholder,tooltip:a.tooltip,type:e("url")});return"none"!==a.width&&n.css("width",a.width),t(this).append(n),n}}},addInputType:function(e,a){t.editable.types[e]=a}},t.fn.editable.defaults={name:"value",id:"id",type:"text",width:"auto",height:"auto",event:"click.editable keydown.editable",onblur:"cancel",tooltip:"Click to edit",loadtype:"GET",loadtext:"Loading...",placeholder:"Click to edit",sortselectoptions:!1,loaddata:{},submitdata:{},ajaxoptions:{}}}(jQuery);
//# sourceMappingURL=/sm/dd800181e331b3c5da8690dd01065168c42d1434a5e4adb35e4d3bf6bdd92dd5.map